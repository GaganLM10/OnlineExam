
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>INDEX</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9"
      crossorigin="anonymous"
    />
    <style>
      a{
        cursor: pointer;
      }
      .quiz-container{
        height:20vh;
      }

.que-not-answered {
    border-color: #33414E !important;
    color: #fff !important;
    background: url("images/Logo2.png");
    border-width: 0px;
      }

.que-not-attempted {
    background: url("images/Logo1.png");
    color: #303030 !important;
    background-size: 100% 100%;
    border-width: 0px;
}

.que-save {
    color: #fff !important;
    background: url("images/Logo3.png");
    background-size: 100% 100%;
    border-width: 0px;
}

.que-save-mark {
    
    color: #fff !important;
    background: url("images/Logo5.png");
    background-size: 100% 100%;
    border-width: 0px;
}

.que-mark {
    border-color: #33414E !important;
    color: #fff !important;
    background: url("images/Logo4.png");
    background-size: 100% 100%;
    border-width: 0px;
}

.pagination>li>a.que-save,
.pagination>li>a.que-save-mark,
.pagination>li>a.que-mark,
.pagination>li>a.que-not-answered {
    /*border-width:0;*/
    background-size: auto 100%;
    background-repeat: no-repeat;
    background-position: center;
    background-color: #fff;
    border-width: 0px;
}



.test-ques-stats {
    padding: 8px 13px;
    background-size: 100% 100%;
}

.mb0 {
    margin-bottom: 0 !important;
}

.pagination>li>a,
.pagination>li>span {
    margin-bottom: 4px;
    border-width: 0 !important;
}

.question-height {
    width: 100%;
    height: 300px;
    overflow-y: scroll;
}


#pallette {
    width: 100%;
}

.question-title {
    border-bottom: 1px solid #333;
    padding-bottom: 12px;
}

.question-footer {
    border-bottom: 1px solid #333;
    padding-top: 14px;
}

.user-profile img {
    margin-left: 15px;
    padding-top: 15px;
    width: 35px;
    cursor: pointer;
}

.test-questions {
    display: flex;
    flex-wrap: wrap;
}

.test-ques {
    padding: 5px 10px;
    float: left;
}

a {
    text-decoration: none;
    color:white;
}

button.full-width {
    width: 100%;
}

#clear{
    position: relative;
    left: 0;
    top: 45vh;
}
#rev_next{
    position: relative;
    left: 2vw;
    top: 45vh;
}
#rev_save{
    position: relative;
    left: 8vw;
    top: 45vh;
}
#save_next{
    position: relative;
    left: 8vw;
    top: 45vh;
}
.submit_btn{
    
}
#submit_btn{
    position: relative;
    top: 10vh;
}
/* ... Your previous CSS code ... */

/* Apply changes only for big screens */
@media screen and (min-width: 769px) {
  .quiz-container{
    font-size:25px;
  }
  .quiz-container ul{
    padding-left: 10vw;
  }
  #question_text{
    padding-left: 10vw;
    padding-top:10vh;
  }
  .right_side #que_div{
    justify-content:center;
    align-items:center;
  }
    .container.panel.panel-default {
      display: flex;
      flex-direction: column;
      overflow-y:scroll;
      height: 25vh;
    }

    .pagination.test-questions {
        flex-wrap: wrap;
        overflow-y: auto;
        max-height: calc(100vh - 300px); /* Adjust the value as needed */
    }

    .pagination.test-questions li {
        width: calc(100% / 10);
    }
    .panel.panel-body.panel-default.px-4 {
        margin-bottom: 20px; 
    }
}



@media screen and (max-width:768px) {
    
    .button_row{
        position: inherit;
        bottom: 0%;
        left: 0%;
    }
    #clear{
        position: inherit;
        bottom: 0;
        left: 0;
    }
    #rev_next{
        position: inherit;
        bottom: 0;
        left: 0;
    }
    #rev_save{
        position: inherit;
        bottom: 0;
        left: 0;
    }
    #save_next{
        position: inherit;
        bottom: 0;
        left: 0;
    }
    #imp{
        display: flex;
        justify-content:center;
    }
    #submit_btn{
        position: inherit;
    }
    .container.panel.panel-default {
        height: 20vh;
        display: flex;
        flex-direction: column;
        overflow-y:scroll;
      }
      .quiz-container{
      overflow-y:scroll;
    }
}
    </style>
  </head>
  <body>
    <nav class="navbar navbar-expand-md py-3 navbar-dark bg-dark">
      <a href="#" class="col-xs-4 navbar-brand">Logo</a>
      <ul class="col-xs-4 navbar-nav mx-auto">
        <li class="nav-item">
          <a href="#" class="nav-link text-light"> Online Test</a>
        </li>
      </ul>
      <div class="">
        <p class="text-light">NAME</p>
      </div>
    </nav>

    <div class="container-fluid">
	  <div class="row">
		<div class="col-md-8 px-3 "id="imp">
			<button type="button" class="btn btn-lg btn-outline-success mt-3 ">
				  IMPORTANT INSTRUCTIONS
			</button>
		</div>
		<div class="col-md-4">
          <div class="text-center ">
            <span id="time_left">TIME LEFT:</span>
            <span id="hours">00</span>
            <span id="mins">00</span>
            <span id="secs">00</span>
            <span id="end"></span>
          </div>
		</div>
	</div>
    <div class="row ">
      <div class="col-md-8 left_side ">
        <div class="row px-3 d-flex quiz-container">
          <h2 id="question_text">Question Text</h2>
           <ul style="list-style:none;">
              <li>
                  <input type="radio" name="answer" id="a" value="a" class="answer" />
                  <label for="a" id="a_text">Answer A</label>
              </li>
              <li>
                  <input type="radio" name="answer" id="b" value="b" class="answer" />
                  <label for="b" id="b_text">Answer B</label>
              </li>
              <li>
                  <input type="radio" name="answer" id="c" value="c" class="answer" />
                  <label for="c" id="c_text">Answer C</label>
              </li>
              <li>
                  <input type="radio" name="answer" id="d" value="d" class="answer" />
                  <label for="d" id="d_text">Answer D</label>
              </li>
            </ul>
        </div>

          <div class="row mb-4 ">
            <div class="col-3 text-start ">
              <button class="btn btn-danger h-100 full-width overflow-auto " id="clear">CLEAR RESPONSE</button>
            </div>
            <div class="col-3 text-center ">
              <button class="btn btn-outline-secondary  h-100" id="rev_save">
                REVIEW & SAVE
              </button>
            </div>
            <div class="col-3 text-center ">
              <button class="btn btn-outline-secondary h-100" id="rev_next">
                REVIEW & NEXT
              </button>
            </div>
            <div class="col-3 ">
              <button class="btn btn-primary h-100" id="save_next" >SAVE & NEXT</button>
            </div>
          </div>
        </div>

      
<div class="col-md-4 right_side">
  <h3 class="text-center bg-dark text-white">Question Palette</h3>
  <div class="container panel panel-default " id="que_div">
    <div class="panel-body px-4">
      <ul class="pagination test-questions">
    @foreach ($questionsData as $i => $questionData)
        <li>
            <a class="test-ques {{ ($i === 0) ? 'que-not-answered' : 'que-not-attempted' }}"  
                data-question="{{ $i }}" data-status="not-attempted">
                {{ str_pad(($i + 1), 2, '0', STR_PAD_LEFT) }}
            </a>
        </li>
    @endforeach
        </ul>
    </div>
  </div>
      <div class="panel panel-body panel-default px-4">
        <h6>Legend:</h6>
          <div class="table-responsive">
              <table class="table table-borderless mb0">
                  <thead>
                      <tr>
                          <td class="full-width"> <a class="test-ques-stats que-not-attempted lblNotVisited">0</a></td>
                          <td>Not Visited</td>
                          <td class="full-width"> <a class="test-ques-stats que-not-answered lblNotAttempted">0</a> </td>
                          <td>Not Answered</td>
                      </tr>
                      <tr>
                          <td class="full-width"> <a class="test-ques-stats que-save lblTotalSaved">0</a>  </td>
                          <td>Answered</td>
                          <td class="full-width"> <a class="test-ques-stats que-mark lblTotalMarkForReview">0</a>  </td>
                          <td>Marked for Review</td>
                      </tr>
                      <tr>
                          <td> <a class="test-ques-stats que-save-mark lblTotalSaveMarkForReview">0</a>  </td>
                          <td colspan="3">Answered &amp; Marked for Review (will be considered for evaluation)</td>
                      </tr>
                  </thead>
              </table>
          </div>
      </div>
			<div class=" text-center">
				<button type="button" class="btn btn-success " id="submit_btn">
        <a href="{{ url('/test-end') }}" id="test_end">SUBMIT</a>
				</button>
			</div>
    </div>
  </div>
 <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm"
      crossorigin="anonymous"
  ></script>

<script>

  document.addEventListener("DOMContentLoaded", function() {
    initializeResponses();
    });

  function submitTest() {
      document.getElementById("test_end").click();
    }

  
var countDownStartTime = '{{ $countDownStartTime }}';
var startTime = new Date(countDownStartTime).getTime(); 
var countDownEndTime = startTime +23400000;
var myfunc = setInterval(() => {
var now = new Date().getTime();
var timeLeft = countDownEndTime - now;
var hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
var minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
var seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
  
  document.getElementById("hours").innerHTML = hours + "h ";
  document.getElementById("mins").innerHTML = minutes + "m ";
  document.getElementById("secs").innerHTML = seconds + "s ";
  
  if (timeLeft < 0) {
    clearInterval(myfunc);
    document.getElementById("hours").innerHTML = "";
    document.getElementById("mins").innerHTML = "";
    document.getElementById("secs").innerHTML = "";
    document.getElementById("end").innerHTML = "TIME UP!!";
    submitTest();
  }
}, 1000);

var questionsData = {!! json_encode($questionsData) !!};
var userResponses = {!! json_encode($userResponses) !!};
var count = {!! json_encode($count) !!};

const quiz = document.getElementById("left_side");
const answerEls = document.querySelectorAll(".answer");
const questionEl = document.getElementById("question_text");
const a_text = document.getElementById("a_text");
const b_text = document.getElementById("b_text");
const c_text = document.getElementById("c_text");
const d_text = document.getElementById("d_text");
const save_nextBtn = document.getElementById("save_next");
const rev_nextBtn = document.getElementById("rev_next");
const rev_saveBtn = document.getElementById("rev_save");
const clearBtn = document.getElementById("clear");
const questionLinks = document.querySelectorAll('.test-ques');
let currentQuiz = 0;

function loadquiz(iter) {
  deselectAnswers();
  const quizdata = questionsData[iter];
  questionEl.innerText = `${iter + 1}. ${quizdata.question}`;
  a_text.innerText = quizdata.options[0];
  b_text.innerText = quizdata.options[1];
  c_text.innerText = quizdata.options[2];
  d_text.innerText = quizdata.options[3];
  const selectedAnswer = userResponses[iter]?.answer[0] || '0';
  if (selectedAnswer !== '0') {
    answerEls.forEach(answerEl => {
      if (answerEl.value === selectedAnswer) {
        answerEl.checked = true;
      }
    });
  }
  else {
    deselectAnswers();
  }
}

loadquiz(0);

function deselectAnswers() {
  answerEls.forEach((answerEl) => (answerEl.checked = false));
}

rev_saveBtn.addEventListener("click", () => {
  questionLinks[currentQuiz].setAttribute("data-status", "review_later");
  updateQuestionLinkBackground(currentQuiz, "que-mark");
  var q=questionsData[currentQuiz].sno;
  var s="r";
  saveResponseToDatabase(q,s);
});

rev_nextBtn.addEventListener("click", () => {
  const selectedAnswer = getSelectedAnswer();
  var m=selectedAnswer+"r";
  questionLinks[currentQuiz].setAttribute("data-status", "marked_for_review");
  var y=questionsData[currentQuiz].sno;
  if (selectedAnswer) {
    updateQuestionLinkBackground(currentQuiz, "que-save-mark");
    saveResponseToDatabase(y,m);
    
  } else {
    updateQuestionLinkBackground(currentQuiz, "que-not-answered");
  }
  navigateToNextQuestion();
});

save_nextBtn.addEventListener("click", () => {
  const selectedAnswer = getSelectedAnswer();
  var z=selectedAnswer+"s";
  questionLinks[currentQuiz].setAttribute("data-status", "saved");
  var x=questionsData[currentQuiz].sno;
  if (selectedAnswer) {
    updateQuestionLinkBackground(currentQuiz, "que-save");
    saveResponseToDatabase(x, z);
  } 
  else {
    updateQuestionLinkBackground(currentQuiz, "que-not-answered");
  }
  navigateToNextQuestion();
});

clearBtn.addEventListener("click", () => {
  answerEls.forEach((answerEl) => (answerEl.checked = false));
  updateQuestionLinkBackground(currentQuiz, "que-not-attempted");
  userResponses[currentQuiz] = "";
});

questionLinks.forEach(link => {
  link.addEventListener('click', () => {
    const questionIndex = link.getAttribute('data-question');
    currentQuiz = parseInt(questionIndex);
    loadquiz(currentQuiz);
    link.classList.remove("que-not-attempted", "que-not-answered", "que-save", "que-save-mark", "que-mark");
    if (userResponses[questionIndex]?.answer.endsWith("s")) {
      link.classList.add('que-save');
    } 
    else if (userResponses[questionIndex]?.answer.endsWith("r")) {
      link.classList.add('que-save-mark');
    } 
    else if (userResponses[questionIndex]?.answer.startsWith("r")) {
      link.classList.add('que-mark');
    } 
    else {
      link.classList.add('que-not-answered');
    }
  });
});


function getSelectedAnswer() {
  let selectedAnswer = null;
  answerEls.forEach((answerEl) => {
    if (answerEl.checked) {
      selectedAnswer = answerEl.value;
    }
  });
  return selectedAnswer;
}

function updateQuestionLinkBackground(questionIndex, className) {
  const questionElement = document.querySelector(`[data-question="${questionIndex}"]`);
  questionElement.classList.remove(
    "que-not-attempted",
    "que-not-answered",
    "que-save",
    "que-save-mark",
    "que-mark"
    );
    questionElement.classList.add(className);
  }
  
  function navigateToNextQuestion() {
    currentQuiz++;
    if (currentQuiz < questionsData.length) {
      updateQuestionLinkBackground(currentQuiz, "que-not-answered");
      loadquiz(currentQuiz);
    } else {
      submitTest();
    }
  }

  function initializeResponses() {
    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
    fetch('/initialize-responses', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-TOKEN': csrfToken,
      }
    })
    .then(response => response.json())
    .then(data => {
      console.log("Server Response", data.message);
    })
    .catch(error => {
      console.error('Error:', error);
    });
    questionLinks.forEach((link, index) => {
      const userResponse = userResponses[index]?.answer || '0';
      console.log(userResponse);
      if (userResponse !== '0') {
        if (userResponse[1]==="s") {
          updateQuestionLinkBackground(index, "que-save");
        } 
        else if (userResponse[1]==="r") {
          updateQuestionLinkBackground(index, "que-save-mark");
        } 
        else if (userResponse[0]==="r") {
          updateQuestionLinkBackground(index, "que-mark");
        } 
        else {
          updateQuestionLinkBackground(index, "que-not-answered");
        }
        const selectedOption = userResponse[0]; 
        answerEls.forEach(answerEl => {
          if (answerEl.value === selectedOption) {
            answerEl.checked = true;
          }
        });
      } else {
        updateQuestionLinkBackground(index, "que-not-attempted");
      }
    });
    updateCount();
    if(count>1){
      showAlert();
    }
  }
  
function saveResponseToDatabase(qid, answer) {
  console.log(answer);
  if (answer !== 'nulls'||answer!=='nullr') { 
    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
    fetch('/save-response', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-TOKEN': csrfToken,
      },
      body: JSON.stringify({
        id: qid, 
        answer: answer,
      }),
    })
    .then(response => response.json())
    .then(data => {
      console.log("Server Response",data.message);
    })
    .catch(error => {
      console.error('Error:', error);
    });
  }
}

document.addEventListener("visibilitychange", () => {
  if (document.visibilityState === 'hidden') {
    if(count<6){
      updateCount();
    }
    console.log(count);
    showAlert();
  }
});

function updateCount() {
  count++;
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  
  fetch('/update-count', { 
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-TOKEN': csrfToken,
    },
    body: JSON.stringify({
      count:count,
    }),
  })
  .then(response => response.json())
  .then(data => {
    console.log('Count updated:', data.message);
  })
  .catch(error => {
    console.error('Error updating count:', error);
  });
}

function showAlert(){
  if(count>=5){
    alert("TEST WILL BE SUBMITTED NOW");
    submitTest();
  }
  else if (count<6&&count>1){
    let rem=5-count;
    alert("You have"+rem+"Attempts Remaining otherwise test will be submitted automatically");
  }
}
  </script>
  
  </body>
  </html>